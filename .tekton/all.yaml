apiVersion: tekton.dev/v1beta1
kind: EventListener
metadata:
  name: BUILD
spec:
  triggers:
  - binding:
      name: pipeline-BUILD
    template:
      name: tt-common
---
apiVersion: tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: pipeline-BUILD
spec:
  params:
  - name: script
    value: ./scripts/pipeline-BUILD.sh

---
apiVersion: tekton.dev/v1beta1
kind: EventListener
metadata:
  name: DEPLOY
spec:
  triggers:
  - binding:
      name: pipeline-DEPLOY
    template:
      name: tt-common
---
apiVersion: tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: pipeline-DEPLOY
spec:
  params:
  - name: script
    value: ./scripts/pipeline-DEPLOY.sh

---
apiVersion: tekton.dev/v1beta1
kind: EventListener
metadata:
  name: ROTATE_STORAGE_CREDENTIALS
spec:
  triggers:
  - binding:
      name: pipeline-ROTATE-STORAGE-CREDENTIALS
    template:
      name: tt-common
---
apiVersion: tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: pipeline-ROTATE-STORAGE-CREDENTIALS
spec:
  params:
  - name: script
    value: ./scripts/pipeline-ROTATE_STORAGE_CREDENTIALS.sh

---
apiVersion: tekton.dev/v1beta1
kind: EventListener
metadata:
  name: ROTATE_APPID_CREDENTIALS
spec:
  triggers:
  - binding:
      name: pipeline-ROTATE-APPID-CREDENTIALS
    template:
      name: tt-common
---
apiVersion: tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: pipeline-ROTATE-APPID-CREDENTIALS
spec:
  params:
  - name: script
    value: ./scripts/pipeline-ROTATE_APPID_CREDENTIALS.sh

---
apiVersion: tekton.dev/v1beta1
kind: EventListener
metadata:
  name: ROTATE_REGISTRY_CREDENTIALS
spec:
  triggers:
  - binding:
      name: pipeline-ROTATE-REGISTRY-CREDENTIALS
    template:
      name: tt-common
---
apiVersion: tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: pipeline-ROTATE-REGISTRY-CREDENTIALS
spec:
  params:
  - name: script
    value: ./scripts/pipeline-ROTATE_REGISTRY_CREDENTIALS.sh

---
apiVersion: tekton.dev/v1beta1
kind: EventListener
metadata:
  name: UNINSTALL
spec:
  triggers:
  - binding:
      name: pipeline-UNINSTALL
    template:
      name: tt-common
---
apiVersion: tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: pipeline-UNINSTALL
spec:
  params:
  - name: script
    value: ./scripts/pipeline-UNINSTALL.sh
---
apiVersion: tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: tt-common
spec:
  params:
  - name: GIT_REPO
  - name: GIT_BRANCH
  - name: REGISTRY_REGION_ID
  - name: REGISTRY_NAMESPACE
  - name: TARGET_CLUSTER_NAME
  - name: IMAGE_NAME
  - name: TARGET_REGION_ID
  - name: TARGET_NAMESPACE
  - name: TARGET_RESOURCE_GROUP
  - name: COS_PLAN
  - name: APP_ID_PLAN
  - name: CLOUDANT_PLAN
  - name: script
  resourcetemplates:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: cd-secret
    type: Opaque
    stringData:
      API_KEY: $(params.API_KEY)
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: pipelinerun-$(uid)-pvc
    spec:
      resources:
        requests:
          storage:  1Gi
      volumeMode: Filesystem
      accessModes:
      - ReadWriteOnce
  - apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      name: pipelinerun-$(uid)
    spec:
      pipelineRef:
        name: pipeline-input-parameter-variable
      workspaces:
      - name: pipeline-workspace
        persistentVolumeClaim:
          claimName: pipelinerun-$(uid)-pvc
      params:
      - name: GIT_REPO
        value: $(params.GIT_REPO)
      - name: GIT_BRANCH
        value: $(params.GIT_BRANCH)
      - name: REGISTRY_REGION_ID
        value: $(params.REGISTRY_REGION_ID)
      - name: REGISTRY_NAMESPACE
        value: $(params.REGISTRY_NAMESPACE)
      - name: TARGET_CLUSTER_NAME
        value: $(params.TARGET_CLUSTER_NAME)
      - name: IMAGE_NAME
        value: $(params.IMAGE_NAME)
      - name: TARGET_REGION_ID
        value: $(params.TARGET_REGION_ID)
      - name: TARGET_NAMESPACE
        value: $(params.TARGET_NAMESPACE)
      - name: TARGET_RESOURCE_GROUP
        value: $(params.TARGET_RESOURCE_GROUP)
      - name: COS_PLAN
        value: $(params.COS_PLAN)
      - name: APP_ID_PLAN
        value: $(params.APP_ID_PLAN)
      - name: CLOUDANT_PLAN
        value: $(params.CLOUDANT_PLAN)
      - name: script
        value: $(params.script)
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pipeline-input-parameter-variable
spec:
  workspaces:
  - name: pipeline-workspace
  params:
  - name: GIT_REPO
  - name: GIT_BRANCH
  - name: REGISTRY_REGION_ID
  - name: REGISTRY_NAMESPACE
  - name: TARGET_CLUSTER_NAME
  - name: IMAGE_NAME
  - name: TARGET_REGION_ID
  - name: TARGET_NAMESPACE
  - name: TARGET_RESOURCE_GROUP
  - name: COS_PLAN
  - name: APP_ID_PLAN
  - name: CLOUDANT_PLAN
  - name: script
  tasks:
  - name: script
    workspaces:
    - name: task-workspace
      workspace: pipeline-workspace
    params:
    - name: GIT_REPO
      value: $(params.GIT_REPO)
    - name: GIT_BRANCH
      value: $(params.GIT_BRANCH)
    - name: REGISTRY_REGION_ID
      value: $(params.REGISTRY_REGION_ID)
    - name: REGISTRY_NAMESPACE
      value: $(params.REGISTRY_NAMESPACE)
    - name: TARGET_CLUSTER_NAME
      value: $(params.TARGET_CLUSTER_NAME)
    - name: IMAGE_NAME
      value: $(params.IMAGE_NAME)
    - name: TARGET_REGION_ID
      value: $(params.TARGET_REGION_ID)
    - name: TARGET_NAMESPACE
      value: $(params.TARGET_NAMESPACE)
    - name: TARGET_RESOURCE_GROUP
      value: $(params.TARGET_RESOURCE_GROUP)
    - name: COS_PLAN
      value: $(params.COS_PLAN)
    - name: APP_ID_PLAN
      value: $(params.APP_ID_PLAN)
    - name: CLOUDANT_PLAN
      value: $(params.CLOUDANT_PLAN)
    - name: script
      value: $(params.script)
    taskRef:
      name: gasket
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: gasket
spec:
  workspaces:
  - name: task-workspace 
    mountPath: /working   
  params:
  - name: GIT_REPO
  - name: GIT_BRANCH
  - name: REGISTRY_REGION_ID
  - name: REGISTRY_NAMESPACE
  - name: TARGET_CLUSTER_NAME
  - name: IMAGE_NAME
  - name: TARGET_REGION_ID
  - name: TARGET_NAMESPACE
  - name: TARGET_RESOURCE_GROUP
  - name: COS_PLAN
  - name: APP_ID_PLAN
  - name: CLOUDANT_PLAN
  - name: script
  steps:
  - name: echoenvvar
    image: ibmcom/pipeline-base-image
    env:
    - name: API_KEY
      valueFrom:
        secretKeyRef:
          name: cd-secret
          key: API_KEY
    - name: GIT_REPO
      value: $(params.GIT_REPO)
    - name: GIT_BRANCH
      value: $(params.GIT_BRANCH)
    - name: REGISTRY_REGION_ID
      value: $(params.REGISTRY_REGION_ID)
    - name: REGISTRY_NAMESPACE
      value: $(params.REGISTRY_NAMESPACE)
    - name: TARGET_CLUSTER_NAME
      value: $(params.TARGET_CLUSTER_NAME)
    - name: IMAGE_NAME
      value: $(params.IMAGE_NAME)
    - name: TARGET_REGION_ID
      value: $(params.TARGET_REGION_ID)
    - name: TARGET_NAMESPACE
      value: $(params.TARGET_NAMESPACE)
    - name: TARGET_RESOURCE_GROUP
      value: $(params.TARGET_RESOURCE_GROUP)
    - name: COS_PLAN
      value: $(params.COS_PLAN)
    - name: APP_ID_PLAN
      value: $(params.APP_ID_PLAN)
    - name: CLOUDANT_PLAN
      value: $(params.CLOUDANT_PLAN)
    - name: script
      value: $(params.script)
    command: ["/bin/bash", "-c"]
    args:
    - |
      env
      # BUILD needs this:
      export ARCHIVE_DIR=.
      # DEPLOY, and probably the rest needs this additional stuff
      export PIPELINE_KUBERNETES_CLUSTER_NAME="$TARGET_CLUSTER_NAME"
      # Setting HOME explicitly to have ibmcloud plugins available
      export HOME="/root"
      cat /cd-config/toolchain.json
      ls -lisa /working
      cd /working
      # script source
      if [ -z $GIT_BRANCH ]; then
        git clone -q $GIT_REPO .
      else
        git clone -q -b $GIT_BRANCH $GIT_REPO .
      fi
      TOOLCHAIN_REGION=$(jq -r '.region_id' /cd-config/toolchain.json | awk -F: '{print $3}')
      ibmcloud config --check-version false
      # REGISTRY_URL mus be based on TARGET_REGION_ID, parse the output of the cr api command, the echo
      # removes the new lines expect: s="Registry API endpoint https://us.icr.io/api OK"
      ibmcloud login -r $TARGET_REGION_ID -g $TARGET_RESOURCE_GROUP --apikey $API_KEY
      r='.*https://([^/]*)'
      s=$(echo $(ibmcloud cr api))
      [[ $s =~ $r ]]
      export REGISTRY_URL=${BASH_REMATCH[1]}
      # use the toolchain region for executing commands
      ibmcloud target -r $TOOLCHAIN_REGION
      # download the cluster config and initialize KUBECONFIG
      ls -lR /root/.bluemix/plugins/container-service
      clusterid=$(ibmcloud ks cluster get $PIPELINE_KUBERNETES_CLUSTER_NAME --json | jq -r .id)
      ibmcloud ks cluster config --cluster $clusterid > /tmp/out
      cat /tmp/out
      eval $(egrep 'export *KUBECONFIG' /tmp/out)
      env | grep KUBECONFIG
      # bash -x $script
      bash $script
    volumeMounts:
    - mountPath: /cd-config
      name: cd-config-volume
  volumes:
  - name: cd-config-volume
    configMap:
      name: toolchain
      items:
      - key: toolchain.json
        path: toolchain.json
